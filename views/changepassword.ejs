<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>Nest Dashboard</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <meta name="description" content="" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta property="og:title" content="" />
    <meta property="og:type" content="" />
    <meta property="og:url" content="" />
    <meta property="og:image" content="" />
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="assets/imgs/theme/favicon.svg" />
    <!-- Template CSS -->
    <link href="assets/css/main.css?v=1.1" rel="stylesheet" type="text/css" />
    <style>
        .position-relative {
            position: relative;
        }

        .position-absolute {
            position: absolute;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
        }

        .form-control {
            padding-right: 30px;
            /* Make space for the icon */
        }
    </style>
</head>

<body>
    <main>

        <section class="content-main mt-80 mb-80">
            <div class="card mx-auto card-login">
                <div class="card-body">
                    <h4 class="card-title mb-4"></h4>
                    <form id="login-form">


                        <div class="mb-3 position-relative">
                            <input style="display: none;" type="text" name="email" value="<%= email %>">
                            <input class="form-control" id="new-password" placeholder="Enter New Password"
                                type="password" />
                            <i class="icon material-icons md-visibility position-absolute" id="toggleNewPassword"
                                style="cursor: pointer;"></i>
                            <span id="password-error" class="text-danger"></span>
                        </div>

                        <div class="mb-3 position-relative">
                            <input class="form-control" id="confirm-password" name="password"
                                placeholder="Confirm Password" type="password" />
                            <i class="icon material-icons md-visibility position-absolute" id="toggleConfirmPassword"
                                style="cursor: pointer;"></i>
                            <span id="confirm-password-error" class="text-danger"></span>
                        </div>


                        <div class="mb-4">
                            <button type="submit" class="btn btn-primary w-100">Login</button>
                        </div>
                        <!-- form-group// -->
                    </form>

                </div>
            </div>
        </section>

    </main>
    <script src="assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="assets/js/vendors/jquery.fullscreen.min.js"></script>
    <!-- Main Script -->
    <script src="assets/js/main.js?v=1.1" type="text/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Function to toggle password visibility
        function togglePasswordVisibility(toggleBtnId, passwordFieldId) {
            const toggleBtn = document.getElementById(toggleBtnId);
            const passwordField = document.getElementById(passwordFieldId);
            const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordField.setAttribute('type', type);
    
            // Change the icon based on the type
            toggleBtn.className = type === 'password'
                ? "icon material-icons md-visibility position-absolute"
                : "icon material-icons md-visibility_off position-absolute";
        }
    
        // Event listeners for password visibility toggle
        document.getElementById('toggleNewPassword').addEventListener('click', function () {
            togglePasswordVisibility('toggleNewPassword', 'new-password');
        });
    
        document.getElementById('toggleConfirmPassword').addEventListener('click', function () {
            togglePasswordVisibility('toggleConfirmPassword', 'confirm-password');
        });
    
        // Form submission handler
        document.getElementById('login-form').addEventListener('submit', async function (event) {
            event.preventDefault();
    
            // Get input elements
            const newPassword = document.getElementById('new-password');
            const confirmPassword = document.getElementById('confirm-password');
            const passwordRegex = /^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    
            // Reset previous error messages
            document.getElementById('password-error').innerText = '';
            document.getElementById('confirm-password-error').innerText = '';
    
            let isValid = true;
    
            // Validate new password
            if (newPassword.value.trim() === '') {
                document.getElementById('password-error').innerText = 'Password is required.';
                isValid = false;
            } else if (!passwordRegex.test(newPassword.value)) {
                document.getElementById('password-error').innerText = 'Password must be at least 8 characters long and include at least one uppercase letter, one digit, and one special character.';
                isValid = false;
            }
    
            // Validate confirm password
            if (confirmPassword.value.trim() === '') {
                document.getElementById('confirm-password-error').innerText = 'Confirm password is required.';
                isValid = false;
            } else if (newPassword.value !== confirmPassword.value) {
                document.getElementById('confirm-password-error').innerText = 'Passwords do not match.';
                isValid = false;
            }
    
            if (!isValid) {
                return;
            }
    
            // If validation passes, send data to the server
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
    
            try {
                const response = await fetch('/updatepassword', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });
    
                const result = await response.json();
    
                if (response.ok) {
                    // Password change successful, redirect or show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Password Changed',
                        text: 'Your password has been successfully changed.',
                    }).then(() => {
                        window.location.replace('/');
                    });
                } else {
                    // Display error messages from the server
                    if (result.passworderror) {
                        document.getElementById('password-error').innerText = result.passworderror;
                    }
                    if (result.confirmPasswordError) {
                        document.getElementById('confirm-password-error').innerText = result.confirmPasswordError;
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('password-error').innerText = 'An error occurred. Please try again later.';
            }
        });
    </script>
    





</body>

</html>