<%- include('/project/views/layouts/header.ejs') %>

    <style>
        .error {
            color: red;
        }
    </style>

    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Edit Transaction</h2>
                    <div>

                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>Basic</h4>
                    </div>
                    <div class="card-body">
                        <form id="transaction_form">
                            <input type="text" style="display: none;" class="form-control" id="transaction_id" name="transaction_id" value="<%= transaction.id %>" />
                        
                            <div class="mb-4">
                                <label for="transaction_date" class="form-label">Transaction Date</label>
                                <input type="date" class="form-control" id="transaction_date" name="transaction_date" value="<%= transaction.transaction_date.toISOString().split('T')[0] %>" />
                                <span id="transaction_date_error" class="error text-danger"></span>
                            </div>
                        
                            <div class="mb-4">
                                <label for="customer_name" class="form-label">Customer</label>
                                <select class="form-select" id="customer_name" name="customer_name">
                                    <option value="">Select a customer</option>
                                    <% customers.forEach(customer => { %>
                                        <option value="<%= customer.customer_name %>" <%= transaction.customer_name === customer.customer_name ? 'selected' : '' %>> 
                                            <%= customer.customer_name %>
                                        </option>
                                    <% }); %>
                                </select>
                                <span id="customer_error" class="error text-danger"></span>
                            </div>
                        
                            <div class="mb-4">
                                <label for="amount" class="form-label">Amount</label>
                                <input type="text" class="form-control" id="amount" name="amount" min="0.01" step="0.01" placeholder="Enter amount" value="<%= transaction.amount %>" />
                                <span id="amount_error" class="error text-danger"></span>
                            </div>

                            <div class="mb-4">
                                <label for="margin" class="form-label">Margin</label>
                                <input type="text" class="form-control" id="margin" name="margin" placeholder="Enter margin" value="<%= transaction.margin %>"/>
                                <span id="margin_error" class="error text-danger"></span>
                            </div>
                        
                            <div class="mb-4">
                                <label for="category_name" class="form-label">Category</label>
                                <select class="form-select" id="category_name" name="category_name">
                                    <option value="">Select a category</option>
                                    <% groupedCategories.forEach(category => { %>
                                        <option value="<%= category.category_name %>" <%= transaction.category_name === category.category_name ? 'selected' : '' %>>
                                            <%= category.category_name %>
                                        </option>
                                    <% }); %>
                                </select>
                                <span id="category_error" class="error text-danger"></span>
                            </div>
                        
                            <div class="mb-4" id="subcategory_div">
                                <label for="subcategory_name" class="form-label">Subcategory</label>
                                <select class="form-select" id="subcategory_name" name="subcategory_name">
                                    <option value="">Select a subcategory</option>
                                    <% 
                                    const selectedCategory = groupedCategories.find(category => category.category_name === transaction.category_name);
                                    if (selectedCategory) {
                                        selectedCategory.subcategories.forEach(subcategory => { 
                                    %>
                                            <option value="<%= subcategory.subcategory_name %>" <%= transaction.subcategory_name === subcategory.subcategory_name ? 'selected' : '' %>> 
                                                <%= subcategory.subcategory_name %>
                                            </option>
                                    <% 
                                        }); 
                                    } 
                                    %>
                                </select>
                                <span id="subcategory_error" class="error text-danger"></span>
                            </div>
                        
                            <div class="mb-4">
                                <label for="payment_method" class="form-label">Payment Method</label>
                                <select class="form-select" id="payment_method" name="payment_method">
                                    <option value="">Select a method</option>
                                    <% paymentTypes.forEach(paymentType => { %>
                                        <option value="<%= paymentType.payment_type %>" <%= transaction.payment_method === paymentType.payment_type ? 'selected' : '' %>> 
                                            <%= paymentType.payment_type %>
                                        </option>
                                    <% }); %>
                                </select>
                                <span id="payment_method_error" class="error text-danger"></span>
                            </div>
                        
                            <div class="mb-4">
                                <label for="transaction_notes" class="form-label">Notes</label>
                                <textarea placeholder="Type here" id="transaction_notes" name="notes" class="form-control" rows="4"><%= transaction.notes %></textarea>
                                <span id="notes_error" class="error text-danger"></span>
                            </div>
                        
                            <button class="btn btn-md rounded font-sm hover-up" type="submit">Submit</button>
                        </form>
                    </div>
                </div>
                <!-- card end// -->

            </div>

        </div>
    </section>
    <!-- content-main end// -->
    <footer class="main-footer font-xs">
        <div class="row pb-30 pt-15">
            <div class="col-sm-6">
                <script>
                    document.write(new Date().getFullYear());
                </script>
                &copy; Nest - HTML Ecommerce Template .
            </div>
            <div class="col-sm-6">
                <div class="text-sm-end">All rights reserved</div>
            </div>
        </div>
    </footer>
    </main>
    <script src="assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="assets/js/vendors/select2.min.js"></script>
    <script src="assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="assets/js/vendors/jquery.fullscreen.min.js"></script>
    <!-- Main Script -->
    <script src="assets/js/main.js?v=1.1" type="text/javascript"></script>


    <script>
    document.getElementById('transaction_form').addEventListener('submit', function (e) {
        e.preventDefault(); // Prevent form submission for validation
        let isValid = true;

        // Clear previous errors
        document.querySelectorAll('.error').forEach(function (errorElement) {
            errorElement.innerHTML = '';
        });

        // Validate Transaction Date
        const transactionDate = document.getElementById('transaction_date').value.trim();
        if (!transactionDate) {
            document.getElementById('transaction_date_error').innerHTML = 'Transaction date is required.';
            isValid = false;
        }

        // Validate Customer
        const customerName = document.getElementById('customer_name').value.trim();
        if (!customerName) {
            document.getElementById('customer_error').innerHTML = 'Please select a customer.';
            isValid = false;
        }

        // Validate Amount
        const amount = document.getElementById('amount').value.trim();
        if (!amount || isNaN(amount) || parseFloat(amount) <= 0) {
            document.getElementById('amount_error').innerHTML = 'Please enter a valid amount greater than 0.';
            isValid = false;
        }


        const margin = document.getElementById('margin').value.trim();
        if (!amount || isNaN(margin) || parseFloat(margin) <= 0) {
            document.getElementById('margin_error').innerHTML = 'Please enter a valid amount greater than 0.';
            isValid = false;
        }

        // Validate Category
        const categoryName = document.getElementById('category_name').value.trim();
        if (!categoryName) {
            document.getElementById('category_error').innerHTML = 'Please select a category.';
            isValid = false;
        }

        // Validate Subcategory
        const subcategoryName = document.getElementById('subcategory_name').value;
        if (!subcategoryName) {
            document.getElementById('subcategory_error').innerHTML = 'Please select a subcategory.';
            isValid = false;
        }

        // Validate Payment Method
        const paymentMethod = document.getElementById('payment_method').value.trim();
        if (!paymentMethod) {
            document.getElementById('payment_method_error').innerHTML = 'Please select a payment method.';
            isValid = false;
        }

        // Validate Notes (Optional)
        const notes = document.getElementById('transaction_notes').value.trim();
        if (notes.length > 255) {
            document.getElementById('notes_error').innerHTML = 'Notes should not exceed 255 characters.';
            isValid = false;
        }

        const transaction_id = document.getElementById('transaction_id').value.trim();

        if (isValid) {
            // Prepare data for submission
            const transactionData = {
                transaction_id: transaction_id,
                transaction_date: transactionDate,
                customer_name: customerName,
                amount: parseFloat(amount),
                margin: parseFloat(margin),
                category_name: categoryName,
                subcategory_name: subcategoryName,
                payment_method: paymentMethod,
                notes: notes
            };

            console.log(`transactionData ${transactionData}`);

            // Send a request to update the transaction
            fetch('/update_transaction', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(transactionData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('success');
                        window.location.href = '/transactionlist';
                    } else {
                        alert('Error updating transaction: ' + data.message);
                    }
                })
                .catch(error => console.error('Error updating transaction:', error));
        }
    });

    document.getElementById('category_name').addEventListener('change', function () {
        const categoryName = this.value;
        const subcategoryDropdown = document.getElementById('subcategory_name');
        const subcategoryDiv = document.getElementById('subcategory_div');

        subcategoryDropdown.innerHTML = '<option value="">Select a subcategory</option>';
        subcategoryDropdown.disabled = true; // Disable until we fetch data

        if (categoryName) {
            // Send a request to fetch subcategories
            fetch('/fetch-subcategories', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ category_name: categoryName })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.subcategories.length > 0) {
                        data.subcategories.forEach(subcategory => {
                            const option = document.createElement('option');
                            option.value = subcategory.trim();
                            option.textContent = subcategory.trim();
                            subcategoryDropdown.appendChild(option);
                        });

                        subcategoryDropdown.disabled = false; // Enable the dropdown
                        subcategoryDiv.style.display = 'block'; // Show the subcategory div
                    } else {
                        subcategoryDiv.style.display = 'none'; // Hide if no subcategories found
                    }
                })
                .catch(error => console.error('Error fetching subcategories:', error));
        } else {
            subcategoryDiv.style.display = 'none'; // Hide if no category selected
        }
    });
</script>

    














    </body>

    </html>